{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/index_of_types.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport join from '@stdlib/array-base-join';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'dims': [ 0 ]\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the first row index at which a given one-dimensional array of types can be found in a two-dimensional reference array of types (or `-1` if not found).\n*\n* ## Notes\n*\n* -   The intended use case for this function is for type dispatch (i.e., given a set of array data types, find a matching interface according the interface's accepted array data types).\n* -   The function assumes that `x` is stored in row-major order.\n* -   The function assumes that the number of indexed elements in `y` equals the number of columns in `x`.\n* -   The function returns a row index. To convert to a linear index, multiply `strideX1` by the return value.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows in `x` (size of first dimension)\n* @param {NonNegativeInteger} M - number of columns in `x` (size of second dimension)\n* @param {ArrayLikeObject} x - input two-dimensional reference array\n* @param {integer} strideX1 - `x` stride length along first dimension\n* @param {integer} strideX2 - `x` stride length along second dimension\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {ArrayLikeObject} y - search array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {integer} row index (if found) and `-1` otherwise\n*\n* @example\n* // Define a reference array to search:\n* var types = [\n*     'float64', 'float64', 'float64',\n*     'float32', 'float32', 'float32',\n*     'uint32', 'uint32', 'float64',\n*     'int32', 'int32', 'float64',\n*     'uint16', 'uint16', 'float64',\n*     'int16', 'int16', 'float64',\n*     'uint8', 'uint8', 'float64',\n*     'int8', 'int8', 'float64'\n* ];\n*\n* // Define reference array dimensions:\n* var N = 8; // rows\n* var M = 3; // columns\n*\n* // Define a search array:\n* y1 = [\n*     'float32', 'float32', 'float32',\n* ];\n*\n* // Find the list of types:\n* var r1 = indexOfTypes( N, M, types, M, 1, 0, y1, 1, 0 );\n* // returns 1\n*\n// Define a search array:\n* y2 = [\n*     'float32', 'float32', 'float64',\n* ];\n*\n* // Find the list of types:\n* var r2 = indexOfTypes( N, M, types, M, 1, 0, y2, 1, 0 );\n* // returns -1\n*/\nfunction indexOfTypes( N, M, x, strideX1, strideX2, offsetX, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\t// Search for the first row which matches `y`...\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tiy = offsetY;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( x[ ix+(j*strideX2) ] !== y[ iy ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tiy += strideY;\n\t\t}\n\t\t// If we successfully iterated over all columns, then that means we've found a match...\n\t\tif ( j === M ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX1;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default indexOfTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport hasProp from '@stdlib/assert-has-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isDataType from '@stdlib/array-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isInputCastingPolicy from '@stdlib/ndarray-base-assert-is-input-casting-policy';\nimport contains from '@stdlib/array-base-assert-contains';\nimport unaryStrided1d from '@stdlib/ndarray-base-unary-strided1d';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport unaryInputCastingDataType from '@stdlib/ndarray-base-unary-input-casting-dtype';\nimport resolveEnum from '@stdlib/ndarray-base-dtype-resolve-enum';\nimport getShape from '@stdlib/ndarray-shape'; // note: non-base accessor is intentional due to input ndarrays originating in userland\nimport ndims from '@stdlib/ndarray-ndims';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport assign from '@stdlib/ndarray-base-assign';\nimport baseEmpty from '@stdlib/ndarray-base-empty';\nimport empty from '@stdlib/ndarray-empty';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport join from '@stdlib/array-base-join';\nimport copy from '@stdlib/array-base-copy';\nimport everyBy from '@stdlib/array-base-every-by';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\nimport indexOfTypes from './index_of_types.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a list of data type enumeration constants.\n*\n* @private\n* @param {Collection} types - list of types\n* @returns {IntegerArray} list of data type enumeration constants\n*/\nfunction types2enums( types ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < types.length; i++ ) {\n\t\tout.push( resolveEnum( types[ i ] ) ); // note: we're assuming that `types[i]` is a known data type; otherwise, the resolved enum will be `null`\n\t}\n\treturn out;\n}\n\n/**\n* Reorders a list of ndarrays such that the output ndarray is the second ndarray argument when passing along to a resolved lower-level strided function.\n*\n* @private\n* @param {Array<ndarray>} arrays - list of input ndarrays\n* @param {ndarray} output - output ndarray\n* @returns {Array<ndarray>} reordered list\n*/\nfunction reorder( arrays, output ) { // TODO: consider replacing with an `array/base/*` utility which expands an input array by inserting a specified value at a specified index and returns a new array\n\tvar out;\n\tvar i;\n\tvar j;\n\n\tout = [];\n\tfor ( i = 0, j = 0; i <= arrays.length; i++ ) {\n\t\tif ( i === 1 ) {\n\t\t\tout.push( output );\n\t\t} else {\n\t\t\tout.push( arrays[ j ] );\n\t\t\tj += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Constructor for applying a strided function to an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided function\n* @param {StringArray} [table.types=[]] - one-dimensional list of ndarray data types describing specialized input and output ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns=[]] - list of strided functions which are specific to specialized input and output ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {string} policies.casting - input ndarray casting policy\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {Error} first argument must be an object having valid properties\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-cumax';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policies ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policies );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'null3L', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( hasProp( table, 'types' ) && !isCollection( table.types ) && !isEmptyCollection( table.types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"types\" property whose associated value is an array-like object.' ) );\n\t}\n\tif ( hasProp( table, 'fcns' ) && !isFunctionArray( table.fcns ) && !isEmptyCollection( table.fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"fcns\" property whose associated value is an array-like object containing functions.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'null2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'null43', table ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tif ( !isInputCastingPolicy( policies.casting ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.', policies.casting ) );\n\t}\n\tthis._table = {\n\t\t'default': table.default,\n\t\t'types': ( table.types ) ? types2enums( table.types ) : [], // note: convert to enums (i.e., integers) to ensure faster comparisons\n\t\t'fcns': ( table.fcns ) ? copy( table.fcns ) : []\n\t};\n\tif ( this._table.types.length !== this._table.fcns.length*2 ) {\n\t\tthrow new Error( 'invalid argument. First argument specifies an unexpected number of types. A pair of input and output ndarray data types must be specified for each provided strided function.' );\n\t}\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output,\n\t\t'casting': policies.casting\n\t};\n\treturn this;\n}\n\n/**\n* Applies a strided function to a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-cumax';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar shx;\n\tvar arr;\n\tvar xdt;\n\tvar ydt;\n\tvar tmp;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Initialize an output array whose shape and memory layout matches the input array:\n\tydt = opts.dtype || unaryOutputDataType( xdt, this._policies.output );\n\ty = empty( shx, {\n\t\t'dtype': ydt,\n\t\t'order': getOrder( x )\n\t});\n\n\t// Determine whether we need to cast the input ndarray...\n\tdt = unaryInputCastingDataType( xdt, ydt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shx, getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input and output ndarray data types:\n\tdtypes = [ resolveEnum( xdt ), resolveEnum( ydt ) ];\n\ti = indexOfTypes( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform operation:\n\tunaryStrided1d( f, reorder( args, y ), opts.dims );\n\n\treturn y;\n});\n\n/**\n* Applies a strided function to a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-cumax';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0, 0.0, 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var out = cumax.assign( x, y );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar flg;\n\tvar xdt;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Cache a reference to the output ndarray:\n\ty = args.pop();\n\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support)...\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Determine whether we need to cast the input ndarray...\n\tdt = unaryInputCastingDataType( xdt, getDType( y ), this._policies.casting ); // eslint-disable-line max-len\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, getShape( x ), getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input and output ndarray data types:\n\tdtypes = [ resolveEnum( dt ), resolveEnum( getDType( y ) ) ];\n\ti = indexOfTypes( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform operation:\n\tunaryStrided1d( f, reorder( args, y ), opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn y;\n});\n\n\n// EXPORTS //\n\nexport default UnaryStrided1dDispatch;\n"],"names":["validate","opts","ndims","dtypes","options","tmp","isObject","TypeError","format","hasOwnProp","dims","isIntegerArray","isEmptyCollection","normalizeIndices","RangeError","join","length","Error","dtype","contains","indexOfTypes","N","M","x","strideX1","strideX2","offsetX","y","strideY","offsetY","ix","iy","i","j","types2enums","types","out","push","resolveEnum","reorder","arrays","output","UnaryStrided1dDispatch","table","idtypes","odtypes","policies","dt","this","isFunction","default","hasProp","isCollection","isFunctionArray","fcns","everyBy","isDataType","isOutputDataTypePolicy","isInputCastingPolicy","casting","_table","copy","_idtypes","_odtypes","_policies","setReadOnly","prototype","nargs","args","err","shx","arr","xdt","ydt","f","arguments","isndarrayLike","getDType","getShape","objectAssign","defaults","zeroTo","unaryOutputDataType","empty","order","getOrder","unaryInputCastingDataType","baseEmpty","assign","unaryStrided1d","flg","pop"],"mappings":"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"}