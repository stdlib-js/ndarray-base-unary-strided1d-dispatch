{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport join from '@stdlib/array-base-join';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'dims': [ 0 ]\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/array-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport contains from '@stdlib/array-base-assert-contains';\nimport unaryStrided1d from '@stdlib/ndarray-base-unary-strided1d';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport getShape from '@stdlib/ndarray-shape'; // note: non-base accessor is intentional due to input ndarrays originating in userland\nimport ndims from '@stdlib/ndarray-ndims';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport empty from '@stdlib/ndarray-empty';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport join from '@stdlib/array-base-join';\nimport everyBy from '@stdlib/array-base-every-by';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Constructor for applying a strided function to an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table containing strided functions\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {string} policy - output data type policy\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be a supported output data type policy\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-cumax';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policy ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policy );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'null3L', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'null2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policy ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported output data type policy. Value: `%s`.', policy ) );\n\t}\n\tthis._table = table;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policy = policy;\n\treturn this;\n}\n\n/**\n* Applies a strided function to a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-cumax';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar shx;\n\tvar arr;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Initialize an output array whose shape and memory layout matches the input array:\n\ty = empty( shx, {\n\t\t'dtype': opts.dtype || unaryOutputDataType( dt, this._policy ),\n\t\t'order': getOrder( x )\n\t});\n\n\t// Resolve the lower-level strided function based on the data type of the input ndarray:\n\tf = this._table[ dt ] || this._table.default;\n\n\t// Perform operation:\n\targs.push( y );\n\tunaryStrided1d( f, args, opts.dims );\n\n\treturn y;\n});\n\n/**\n* Applies a strided function to a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-cumax';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0, 0.0, 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var out = cumax.assign( x, y );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar tmp;\n\tvar flg;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support)...\n\tfor ( i = 1; i < args.length-1; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the lower-level strided function based on the data type of the input ndarray:\n\tf = this._table[ dt ] || this._table.default;\n\n\t// Ensure that the output ndarray is the second ndarray argument when passing along to the lower-level strided function below:\n\ttmp = args[ 1 ];\n\targs[ 1 ] = args[ args.length-1 ];\n\targs[ args.length-1 ] = tmp;\n\n\t// Perform operation:\n\tunaryStrided1d( f, args, opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn args[ 1 ];\n});\n\n\n// EXPORTS //\n\nexport default UnaryStrided1dDispatch;\n"],"names":["validate","opts","ndims","dtypes","options","tmp","isObject","TypeError","format","hasOwnProp","dims","isIntegerArray","isEmptyCollection","normalizeIndices","RangeError","join","length","Error","dtype","contains","UnaryStrided1dDispatch","table","idtypes","odtypes","policy","dt","i","this","isFunction","default","isCollection","everyBy","isDataType","isOutputDataTypePolicy","_table","_idtypes","_odtypes","_policy","setReadOnly","prototype","x","nargs","args","err","shx","arr","f","N","y","arguments","isndarrayLike","getDType","push","getShape","objectAssign","defaults","zeroTo","empty","unaryOutputDataType","order","getOrder","unaryStrided1d","flg"],"mappings":"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"}