{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"dims\": null\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isIntegerArray = require( '@stdlib/assert-is-integer-array' ).primitives;\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar join = require( '@stdlib/array-base-join' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'dims': [ 0 ]\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar hasProp = require( '@stdlib/assert-has-property' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar isFunctionArray = require( '@stdlib/assert-is-function-array' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar isInputCastingPolicy = require( '@stdlib/ndarray-base-assert-is-input-casting-policy' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar unaryStrided1d = require( '@stdlib/ndarray-base-unary-strided1d' );\nvar unaryOutputDataType = require( '@stdlib/ndarray-base-unary-output-dtype' );\nvar unaryInputCastingDataType = require( '@stdlib/ndarray-base-unary-input-casting-dtype' );\nvar dtypes2enums = require( '@stdlib/ndarray-base-dtypes2enums' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to input ndarrays originating in userland\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar baseEmpty = require( '@stdlib/ndarray-base-empty' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar join = require( '@stdlib/array-base-join' );\nvar copy = require( '@stdlib/array-base-copy' );\nvar insertAt = require( '@stdlib/array-base-insert-at' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar gindexOfRow = require( '@stdlib/blas-ext-base-gindex-of-row' ).ndarray;\nvar objectAssign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Constructor for applying a strided function to an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided function\n* @param {StringArray} [table.types=[]] - one-dimensional list of ndarray data types describing specialized input and output ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns=[]] - list of strided functions which are specific to specialized input and output ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {string} policies.casting - input ndarray casting policy\n* @param {Options} [options] - function options\n* @param {boolean} [options.strictTraversalOrder=false] - boolean specifying whether to require that element traversal match the memory layout of an input ndarray\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {Error} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policies, options ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\tif ( arguments.length > 4 ) {\n\t\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policies, options ); // eslint-disable-line max-len\n\t\t}\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policies );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( hasProp( table, 'types' ) && !isCollection( table.types ) && !isEmptyCollection( table.types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"types\" property whose associated value is an array-like object.' ) );\n\t}\n\tif ( hasProp( table, 'fcns' ) && !isFunctionArray( table.fcns ) && !isEmptyCollection( table.fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"fcns\" property whose associated value is an array-like object containing functions.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tif ( !isInputCastingPolicy( policies.casting ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.', policies.casting ) );\n\t}\n\tthis._table = {\n\t\t'default': table.default,\n\t\t'types': ( table.types ) ? dtypes2enums( table.types ) : [], // note: convert to enums (i.e., integers) to ensure faster comparisons\n\t\t'fcns': ( table.fcns ) ? copy( table.fcns ) : []\n\t};\n\tif ( this._table.types.length !== this._table.fcns.length*2 ) {\n\t\tthrow new Error( 'invalid argument. First argument specifies an unexpected number of types. A pair of input and output ndarray data types must be specified for each provided strided function.' );\n\t}\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output,\n\t\t'casting': policies.casting\n\t};\n\tif ( arguments.length > 4 ) {\n\t\tthis._apply = unaryStrided1d.factory( options ); // note: delegate options validation to factory method\n\t} else {\n\t\tthis._apply = unaryStrided1d;\n\t}\n\treturn this;\n}\n\n/**\n* Applies a strided function to a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar shx;\n\tvar arr;\n\tvar xdt;\n\tvar ydt;\n\tvar tmp;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Initialize an output array whose shape and memory layout matches the input array:\n\tydt = opts.dtype || unaryOutputDataType( xdt, this._policies.output );\n\ty = empty( shx, {\n\t\t'dtype': ydt,\n\t\t'order': getOrder( x )\n\t});\n\n\t// Determine whether we need to cast the input ndarray...\n\tdt = unaryInputCastingDataType( xdt, ydt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shx, getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input and output ndarray data types:\n\ti = gindexOfRow( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes2enums( [ xdt, ydt ] ), 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform operation:\n\tthis._apply( f, insertAt( args, 1, y ), opts.dims );\n\n\treturn y;\n});\n\n/**\n* Applies a strided function to a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0, 0.0, 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var out = cumax.assign( x, y );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar flg;\n\tvar xdt;\n\tvar ydt;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Cache a reference to the output ndarray:\n\ty = args.pop();\n\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support)...\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Determine whether we need to cast the input ndarray...\n\tydt = getDType( y );\n\tdt = unaryInputCastingDataType( xdt, ydt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, getShape( x ), getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input and output ndarray data types:\n\ti = gindexOfRow( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes2enums( [ xdt, ydt ] ), 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform operation:\n\tthis._apply( f, insertAt( args, 1, y ), opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn y;\n});\n\n\n// EXPORTS //\n\nmodule.exports = UnaryStrided1dDispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for applying a strided function to an input ndarray.\n*\n* @module @stdlib/ndarray-base-unary-strided1d-dispatch\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n* var UnaryStrided1dDispatch = require( '@stdlib/ndarray-base-unary-strided1d-dispatch' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isIntegerArray", "isEmptyCollection", "normalizeIndices", "join", "contains", "format", "validate", "opts", "ndims", "dtypes", "options", "tmp", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "hasProp", "isndarrayLike", "isObject", "isFunction", "isCollection", "isEmptyCollection", "isFunctionArray", "isDataType", "isOutputDataTypePolicy", "isInputCastingPolicy", "contains", "unaryStrided1d", "unaryOutputDataType", "unaryInputCastingDataType", "dtypes2enums", "getShape", "ndims", "getDType", "getOrder", "assign", "baseEmpty", "empty", "zeroTo", "join", "copy", "insertAt", "everyBy", "gindexOfRow", "objectAssign", "format", "defaults", "validate", "UnaryStrided1dDispatch", "table", "idtypes", "odtypes", "policies", "options", "dt", "i", "x", "nargs", "args", "opts", "err", "shx", "arr", "xdt", "ydt", "tmp", "N", "y", "flg", "f", "main"]
}
