{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"dims\": null\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isIntegerArray = require( '@stdlib/assert-is-integer-array' ).primitives;\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar join = require( '@stdlib/array-base-join' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'dims': [ 0 ]\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isDataType = require( '@stdlib/array-base-assert-is-data-type' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar unaryStrided1d = require( '@stdlib/ndarray-base-unary-strided1d' );\nvar unaryOutputDataType = require( '@stdlib/ndarray-base-unary-output-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to input ndarrays originating in userland\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar join = require( '@stdlib/array-base-join' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar objectAssign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Constructor for applying a strided function to an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table containing strided functions\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {string} policy - output data type policy\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be a supported output data type policy\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policy ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policy );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policy ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported output data type policy. Value: `%s`.', policy ) );\n\t}\n\tthis._table = table;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policy = policy;\n\treturn this;\n}\n\n/**\n* Applies a strided function to a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar shx;\n\tvar arr;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Initialize an output array whose shape and memory layout matches the input array:\n\ty = empty( shx, {\n\t\t'dtype': opts.dtype || unaryOutputDataType( dt, this._policy ),\n\t\t'order': getOrder( x )\n\t});\n\n\t// Resolve the lower-level strided function based on the data type of the input ndarray:\n\tf = this._table[ dt ] || this._table.default;\n\n\t// Perform operation:\n\targs.push( y );\n\tunaryStrided1d( f, args, opts.dims );\n\n\treturn y;\n});\n\n/**\n* Applies a strided function to a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform an operation\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0, 0.0, 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var out = cumax.assign( x, y );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar tmp;\n\tvar flg;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support)...\n\tfor ( i = 1; i < args.length-1; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, apply the strided function across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the lower-level strided function based on the data type of the input ndarray:\n\tf = this._table[ dt ] || this._table.default;\n\n\t// Ensure that the output ndarray is the second ndarray argument when passing along to the lower-level strided function below:\n\ttmp = args[ 1 ];\n\targs[ 1 ] = args[ args.length-1 ];\n\targs[ args.length-1 ] = tmp;\n\n\t// Perform operation:\n\tunaryStrided1d( f, args, opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn args[ 1 ];\n});\n\n\n// EXPORTS //\n\nmodule.exports = UnaryStrided1dDispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for applying a strided function to an input ndarray.\n*\n* @module @stdlib/ndarray-base-unary-strided1d-dispatch\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-cumax' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n* var UnaryStrided1dDispatch = require( '@stdlib/ndarray-base-unary-strided1d-dispatch' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var cumax = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = cumax.apply( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ -1.0, 2.0, 2.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isIntegerArray", "isEmptyCollection", "normalizeIndices", "join", "contains", "format", "validate", "opts", "ndims", "dtypes", "options", "tmp", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isndarrayLike", "isObject", "isFunction", "isCollection", "isDataType", "isOutputDataTypePolicy", "contains", "unaryStrided1d", "unaryOutputDataType", "getShape", "ndims", "getDType", "getOrder", "empty", "zeroTo", "join", "everyBy", "objectAssign", "format", "defaults", "validate", "UnaryStrided1dDispatch", "table", "idtypes", "odtypes", "policy", "dt", "i", "x", "options", "nargs", "args", "opts", "err", "shx", "arr", "f", "N", "y", "tmp", "flg", "main"]
}
